{"version":3,"sources":["modules/Map.js","modules/GenerateMapBtn.js","misc/constants.js","misc/mapGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Map","props","tiles","mapTiles","forEach","tileColumn","i","tile","j","typeClass","type","uniqueKey","tileClassName","classNames","push","className","toString","GenerateMapBtn","onClick","onGenerateMap","TILE_TYPES","getRandomValue","range","Math","round","random","getNeighbors","x","y","mapArray","left","undefined","right","top","bottom","getRandomNeighbor","randomVal","neighbors","randomNeightborCoords","availableNeighbors","length","ifValidNeighbors","typeToCheck","result","GenerateMap","Array","randomCoordX","randomCoordY","isRuinAdded","generateRuins","isMountainAdded","generateMountains","WASTELAND_LENGTH","generateWasteland","App","state","this","setState","handleGenerateMap","bind","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.15f191be.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nexport default function Map(props) {\n\tlet tiles = props.tiles,\n\tmapTiles = [];\n\n\ttiles.forEach((tileColumn, i) => {\n\t\ttileColumn.forEach((tile, j) => {\n\t\t\tconst typeClass = 'cartographers__tile--' + tile.type,\n\t\t\t\tuniqueKey = i + '-' + j,\n\t\t\t\ttileClassName = classNames(\n\t\t\t\t\t\"cartographers__tile\",\n\t\t\t\t\ttypeClass\n\t\t\t\t);\n\n\t\t\t\tmapTiles.push(\n\t\t\t\t<div\n\t\t\t\t\tclassName={tileClassName}\n\t\t\t\t\tkey={uniqueKey.toString()}\n\t\t\t\t>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t);\n\t\t});\n\t});\n\n\treturn (\n\t\t<div className=\"cartographers__map\">\n\t\t\t{mapTiles}\n\t\t</div>\n\t);\n};","import React from \"react\";\n\nexport default function GenerateMapBtn(props) {\n\treturn (\n\t\t<div className=\"cartographers__button-wrapper\">\n\t\t\t<button className=\"cartographers__button\" onClick={props.onGenerateMap}>Generate a new map</button>\n\t\t</div>\n\t);\n};","export const MAP_WIDTH = 11;\nexport const MAP_HEIGHT = 11;\nexport const WASTELAND_LENGTH = 7;\nexport const MOUNTAINS_NO = 5;\nexport const RUINS_NO = 6;\nexport const TILE_TYPES = {\n    0: \"empty\",\n    1: \"wasteland\",\n\t2: \"mountain\",\n\t3: \"ruin\"\n};","import { MAP_WIDTH, MAP_HEIGHT, WASTELAND_LENGTH, MOUNTAINS_NO, RUINS_NO, TILE_TYPES } from \"./constants\";\n\n\n/**\n * Get a random number between 0 and range - 1\n * Returns a number.\n*/\nfunction getRandomValue(range) {\n    return Math.round(Math.random() * (range - 1));\n}\n\n/**\n * Get all neighbors of given tile's coords.\n * Returns an object with all four neighbors.\n*/\nexport function getNeighbors(x, y, mapArray) {\n    return {\n        left: mapArray[x][y - 1] ? mapArray[x][y - 1] : undefined,\n        right: mapArray[x][y + 1] ? mapArray[x][y + 1] : undefined,\n        top: mapArray[x - 1] ? mapArray[x - 1][y] : undefined,\n        bottom: mapArray[x + 1] ? mapArray[x + 1][y] : undefined\n    }\n}\n\n/**\n * Get a random wasteland's neighbor.\n * Returns an object with coords.\n*/\nfunction getRandomNeighbor(mapArray) {\n    let availableNeighbors = [],\n        randomVal, neighbors, randomNeightborCoords;\n\n    // check every empty tile around existing wasteland\n    mapArray.forEach((tileColumn, x) => {\n        tileColumn.forEach((tile , y) => {\n            if (tile.type === TILE_TYPES[1]) {\n                neighbors = getNeighbors(x, y, mapArray);\n\n                if (neighbors.left?.type === TILE_TYPES[0]) {\n                    availableNeighbors.push({x: x, y: y - 1});\n                }\n                if (neighbors.right?.type === TILE_TYPES[0]) {\n                    availableNeighbors.push({x: x, y: y + 1});\n                }\n                if (neighbors.top?.type === TILE_TYPES[0]) {\n                    availableNeighbors.push({x: x - 1, y: y});\n                }\n                if (neighbors.bottom?.type === TILE_TYPES[0]) {\n                    availableNeighbors.push({x: x + 1, y: y});\n                }\n            }\n        });\n    })\n\n    randomVal = getRandomValue(availableNeighbors.length - 1);\n    randomNeightborCoords = availableNeighbors[randomVal];\n\n    return {\n        x: randomNeightborCoords.x, \n        y: randomNeightborCoords.y \n    };\n}\n\n/**\n * Generate Wasteland. \n * Returns modified mapArray.\n*/\nfunction generateWasteland(mapArray) {\n    let randomCoordX, randomCoordY, randomNeightborCoords;\n\n    // get one random empty tile to start the wasteland\n    randomCoordX = getRandomValue(MAP_WIDTH);\n    randomCoordY = getRandomValue(MAP_HEIGHT);\n\n    mapArray[randomCoordY][randomCoordX] = {\n        type: TILE_TYPES[1] // all spaces are empty by default\n    }\n\n    // get the rest of the wasteland tiles\n    for (let i = 0; i < WASTELAND_LENGTH - 1; i++) {\n        randomNeightborCoords = getRandomNeighbor(mapArray);\n        mapArray[randomNeightborCoords.x][randomNeightborCoords.y] = {\n            type: TILE_TYPES[1]\n        }\n    }\n\n    return mapArray;\n}\n\n/**\n * Check if the given tile is empty and has no other tiles with the given type in the neighborhood \n * Returns boolean.\n*/\nexport function ifValidNeighbors(tile, neighbors, typeToCheck) {\n    let result = false;\n\n    if (tile.type === TILE_TYPES[0]\n        && neighbors.left?.type !== typeToCheck \n        && neighbors.right?.type !== typeToCheck \n        && neighbors.top?.type !== typeToCheck\n        && neighbors.bottom?.type !== typeToCheck) {\n        result = true;\n    }\n\n    return result;\n}\n\n/**\n * Generate Mountains. \n * Returns modified mapArray.\n*/\nfunction generateMountains(mapArray) {\n    let randomCoordX, randomCoordY, neighbors,\n        isMountainAdded = true;\n\n    for (let i = 0; i < MOUNTAINS_NO; i++) {   \n        do {\n            isMountainAdded = false;\n\n            // get a random tile\n            randomCoordX = getRandomValue(MAP_WIDTH);\n            randomCoordY = getRandomValue(MAP_HEIGHT);\n\n            neighbors = getNeighbors(randomCoordX, randomCoordY, mapArray);\n\n            //check if the random tile is empty and has no other mountains in the neighborhood\n            if (ifValidNeighbors(mapArray[randomCoordX][randomCoordY], neighbors, TILE_TYPES[2])) {\n                    mapArray[randomCoordX][randomCoordY] = {\n                        type: TILE_TYPES[2]\n                    }\n                    isMountainAdded = true;\n                }\n            } while (!isMountainAdded);\n    }\n\n    return mapArray;\n}\n\n/**\n * Generate Ruins. \n * Returns modified mapArray.\n*/\nfunction generateRuins(mapArray) {\n    let randomCoordX, randomCoordY, neighbors,\n        isRuinAdded = true;\n\n    for (let i = 0; i < RUINS_NO; i++) {   \n        do {\n            isRuinAdded = false;\n\n            // get a random tile\n            randomCoordX = getRandomValue(MAP_WIDTH);\n            randomCoordY = getRandomValue(MAP_HEIGHT);\n\n            neighbors = getNeighbors(randomCoordX, randomCoordY, mapArray);\n\n            //check if the random tile is empty and has no other ruins in the neighborhood\n            if (ifValidNeighbors(mapArray[randomCoordX][randomCoordY], neighbors, TILE_TYPES[3])) {\n                    mapArray[randomCoordX][randomCoordY] = {\n                        type: TILE_TYPES[3]\n                    }\n                    isRuinAdded = true;\n                }\n            } while (!isRuinAdded);\n    }\n\n    return mapArray;\n}\n\nexport function GenerateMap() {\n    let tiles = new Array(MAP_WIDTH);\n\n    for (let i = 0; i < MAP_WIDTH; i++) {\n        tiles[i] = new Array(MAP_HEIGHT);\n        for (let j = 0; j < MAP_HEIGHT; j++) {\n            tiles[i][j] = {\n                type: TILE_TYPES[0] // all spaces are empty by default\n            }\n        }\n    }\n\n    // generate wasteland\n    tiles = generateWasteland(tiles);\n\n    // generate mountains\n    tiles = generateMountains(tiles);\n\n    // generate ruins\n    tiles = generateRuins(tiles);\n\n    return tiles;\n}","import './App.css';\nimport React from \"react\";\nimport Map from \"./modules/Map\";\nimport GenerateMapBtn from \"./modules/GenerateMapBtn\"\n\nimport { GenerateMap } from \"./misc/mapGenerator\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tiles: GenerateMap()\n        };\n    };\n\n  handleGenerateMap() {\n      this.setState({\n        tiles: GenerateMap()\n      })\n\t};\n\n  render() {\n      return (\n          <div className=\"cartographers\">\n              <header className=\"cartographers__header\">\n                  <p className=\"cartographers__logo\">CARTOGRAPHERS</p>\n                  <p className=\"cartographers__subtitle\">map generator</p>\n              </header>\n              <Map tiles={this.state.tiles}/>\n              <GenerateMapBtn onGenerateMap={this.handleGenerateMap.bind(this)}/>\n          </div>\n      );\n  };\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}